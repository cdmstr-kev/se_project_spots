!function(){"use strict";const e={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},t=(e,t,r)=>{const o=e.querySelector(`#${t.id}-error`);t.classList.remove(r.inputErrorClass),o.textContent="",o.classList.remove(r.errorClass)},r=(e,t,r)=>{(e=>e.some(e=>!e.validity.valid))(e)?o(t,r):(t.classList.remove(r.inactiveButtonClass),t.disabled=!1)},o=(e,t)=>{e.classList.add(t.inactiveButtonClass),e.disabled=!0},n=(e,o,n)=>{o.forEach(r=>{t(e,r,n)});const a=e.querySelector(n.submitButtonSelector);r(o,a,n)};function a(e,t,r="Save",o="Saving..."){e.textContent=t?o:r}const s=document.getElementById("logo"),c=document.getElementById("profile-picture");s.src="d3610e9c6dce3cb370d8.svg";const i=new class{constructor({baseUrl:e,headers:t}){this._baseUrl=e,this._headers=t}getAppInfo(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(e=>e.ok?e.json():Promise.reject(`Error: ${e.statusText}`))}editUserInfo({name:e,about:t}){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then(e=>e.ok?e.json():Promise.reject(`Error: ${e.statusText}`))}editUserAvatar({avatar:e}){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(e=>e.ok?e.json():Promise.reject(`Error: ${e.statusText}`))}editLikeStatus({cardId:e,isLiked:t}){return console.log(t),fetch(`${this._baseUrl}/cards/${e}/likes`,{method:t?"PUT":"DELETE",headers:this._headers}).then(e=>e.ok?e.json():Promise.reject(`Error: ${e.statusText}`))}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(e=>e.ok?e.json():Promise.reject(`Error: ${e.statusText}`))}addCard({name:e,link:t}){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then(e=>e.ok?e.json():Promise.reject(`Error: ${e.statusText}`))}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(e=>e.ok?e.json():Promise.reject(`Error: ${e.statusText}`))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"8882c22c-2148-4e06-953e-3bab8baa4120","Content-Type":"application/json"}}),l=document.querySelector(".profile__edit-btn"),d=document.querySelector("#edit-profile-modal"),u=document.querySelector(".profile__name"),m=document.querySelector(".profile__description"),_=document.querySelector(".modal__form"),h=d.querySelector("#profile-name"),f=d.querySelector("#description"),v=document.querySelector("#profile-picture-modal"),y=document.querySelector(".profile__avatar-btn"),p=v.querySelector(".modal__form"),S=v.querySelector("#profile-picture-input"),E=document.querySelector("#delete-card-modal"),b=E.querySelector(".modal__form"),q=document.querySelector(".profile__new-post-btn"),g=document.querySelector("#new-post-modal"),L=g.querySelector(".modal__button"),k=document.querySelectorAll(".modal__close-btn"),C=document.querySelectorAll(".modal"),x=g.querySelector(".modal__form"),$=g.querySelector("#caption"),U=g.querySelector("#image-link"),j=document.querySelector(".cards__list"),T=document.querySelector("#card-template").content.querySelector(".card"),A=document.querySelector("#preview-modal"),I=A.querySelector(".modal__image"),P=A.querySelector(".modal__caption");let D,B;function w(e){e.classList.add("modal_is-open"),document.addEventListener("keydown",O)}function N(e){e.classList.remove("modal_is-open"),document.removeEventListener("keydown",O)}function O(e){"Escape"===e.key&&C.forEach(e=>{e.classList.contains("modal_is-open")&&N(e)})}function J(e,t="prepend"){const r=function(e){const t=T.cloneNode(!0),r=t.querySelector(".card__description"),o=t.querySelector(".card__image"),n=t.querySelector(".card__icon"),a=t.querySelector(".card__delete-btn");return 1==e.isLiked&&n.classList.add("card__icon_active"),o.src=e.link,o.alt=e.name,r.textContent=e.name,n.addEventListener("click",t=>function(e,t){e.preventDefault();const r=e.target;i.editLikeStatus({cardId:t,isLiked:!r.classList.contains("card__icon_active")}).then(()=>{r.classList.toggle("card__icon_active")}).catch(e=>{console.error("Error editing like status:",e)})}(t,e._id)),a.addEventListener("click",()=>function(e,t){D=e,B=t._id,w(E)}(t,e)),o.addEventListener("click",()=>{!function(e){I.src=e.link,I.alt=e.name,P.textContent=e.name,w(A)}(e)}),t}(e);j[t](r)}var H;k.forEach(e=>{const t=e.closest(".modal");e.addEventListener("click",()=>N(t))}),C.forEach(e=>{e.addEventListener("click",t=>{t.target===e&&N(e)})}),l.addEventListener("click",function(){h.value=u.textContent,f.value=m.textContent,n(d,[h,f],e),w(d)}),y.addEventListener("click",function(){w(v)}),q.addEventListener("click",function(){w(g)}),p.addEventListener("submit",function(e){e.preventDefault();const t=e.submitter;a(t,!0),i.editUserAvatar({avatar:S.value}).then(e=>{c.src=e.avatar,N(v)}).catch(e=>{console.error("Error updating user info:",e)}).finally(()=>{a(t,!1)})}),_.addEventListener("submit",function(e){e.preventDefault();const t=e.submitter;a(t,!0),i.editUserInfo({name:h.value,about:f.value}).then(e=>{u.textContent=e.name,m.textContent=e.about,N(d)}).catch(e=>{console.error("Error updating user info:",e)}).finally(()=>{a(t,!1)})}),b.addEventListener("submit",function(e){e.preventDefault();const t=e.submitter;a(t,!0,"Delete","Deleting..."),i.deleteCard(B).then(()=>{D.remove(),N(E)}).catch(e=>{console.error("Error deleting card:",e)}).finally(()=>{a(t,!1,"Delete","Deleting...")})}),x.addEventListener("submit",function(t){t.preventDefault(),a(t.submitter,!0);const r={name:$.value,link:U.value};i.addCard(r).then(r=>{J(r),N(g),t.target.reset(),o(L,e);const a=Array.from(t.target.querySelectorAll(e.inputSelector));n(t.target,a,e)}).catch(e=>{console.error("Error creating card:",e)}).finally(()=>{a(L,!1)})}),i.getAppInfo().then(([e,t])=>{t.forEach(function(e){J(e,"append")}),u.textContent=e.name,m.textContent=e.about,c.src=e.avatar}).catch(e=>{console.error("Error fetching initial cards:",e)}),H=e,document.querySelectorAll(H.formSelector).forEach(e=>{((e,o)=>{const n=Array.from(e.querySelectorAll(o.inputSelector)),a=e.querySelector(o.submitButtonSelector);r(n,a,o),n.forEach(s=>{s.addEventListener("input",c=>{((e,r,o)=>{r.validity.valid?t(e,r,o):((e,t,r,o)=>{const n=e.querySelector(`#${t.id}-error`);t.classList.add(o.inputErrorClass),n.textContent=r,n.classList.add(o.errorClass)})(e,r,r.validationMessage,o)})(e,s,o),r(n,a,o)})})})(e,H)})}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,